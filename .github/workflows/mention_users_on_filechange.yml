name: Mention Users on Specific File Change in PR

on:
  pull_request:

jobs:
  mention-users:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      
      - name: Read configuration and mention users
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the configuration file
            const configPath = '.github/notify-config.json';
            const configFile = fs.readFileSync(configPath, 'utf8');
            const config = JSON.parse(configFile);
            
            // Extract PR number
            const prNumber = context.issue.number; // Correct way to get PR number
            
            // Async function to handle API calls and logic
            async function run() {
              // Fetch list of files changed in the PR
              const listFilesResponse = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              const changedFiles = listFilesResponse.data.map(file => file.filename);
              
              // Check if the PR contains changes to the files specified in the configuration
              for (const file of config.files_to_watch) {
                if (changedFiles.some(changedFile => changedFile === file.path)) {
                  // Construct the mention message
                  const usersToMention = file.users.join(' ');
                  const message = `Changes have been detected in ${file.path}. Paging ${usersToMention} for review.`;
                  
                  // Post the comment on the PR
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: message
                  });
                  break; // Stop after first match, remove if you want to check all files
                }
              }
            }
            
            // Execute the async function
            run().catch(err => core.setFailed(`Unhandled error: ${err}`));

